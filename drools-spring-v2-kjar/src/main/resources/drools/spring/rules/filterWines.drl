import rs.uns.ac.ftn.Diplomski.model.Wine
import rs.uns.ac.ftn.Diplomski.model.Grape
import rs.uns.ac.ftn.Diplomski.model.drl.PossibleWines
import rs.uns.ac.ftn.Diplomski.model.enumeration.WineColor
import rs.uns.ac.ftn.Diplomski.model.enumeration.WineBody
import rs.uns.ac.ftn.Diplomski.model.enumeration.WineSugar
import rs.uns.ac.ftn.Diplomski.model.enumeration.WineFlavor
import rs.uns.ac.ftn.Diplomski.web.dto.GrapeListDTO
import rs.uns.ac.ftn.Diplomski.web.dto.GrapeDTO

rule "find all wines that satisfy filter"
    agenda-group "filter"
    when
        $w: Wine($wineId: id);
        $c: WineColor();
        $b: WineBody();
        $s: WineSugar();
        $f: WineFlavor();
        getWine($wineId, $b, $c, $s, $f;)
        $pb: PossibleWines($wines: wines)
    then
        $wines.add($w);
end

query getWine(Long wineId, WineBody body, WineColor color, WineSugar sugar, WineFlavor flavor)
    hasBody(wineId, body;);
    hasColor(wineId, color;);
    hasFlavor(wineId, flavor;);
    hasSugar(wineId, sugar;);
end

query hasBody(Long wineId, WineBody body)
    Wine(wineId, body;)
end

query hasColor(Long wineId, WineColor color)
    Wine(wineId, WineBody, color;)
end

query hasFlavor(Long wineId, WineFlavor flavor)
    Wine(wineId, WineBody, WineColor, WineSugar, flavor;)
end

query hasSugar(Long wineId, WineSugar sugar)
    Wine(wineId, WineBody, WineColor, sugar;)
end
