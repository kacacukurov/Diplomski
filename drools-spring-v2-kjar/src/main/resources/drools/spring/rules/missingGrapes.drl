import rs.uns.ac.ftn.Diplomski.model.Wine
import rs.uns.ac.ftn.Diplomski.model.Grape
import rs.uns.ac.ftn.Diplomski.model.drl.GrapeList
import rs.uns.ac.ftn.Diplomski.web.dto.GrapeListDTO
import rs.uns.ac.ftn.Diplomski.web.dto.GrapeDTO

import java.util.List;

rule "Find grapes for chosen wine"
    agenda-group "missing-grapes"
    salience 10
    when
        $wine: Wine($allGrapes: grapes, $name: wineName);
        $gl: GrapeList($usersGrapes: grapeLists);
        $glDTO: GrapeListDTO();
        $allGrapesIDS: List() from accumulate (
            Grape($id: id) from $allGrapes, collectList($id)
        )
        $userGrapesIDS: List() from accumulate (
            Grape($id: id) from $usersGrapes, collectList($id)
        )
        checkIfGrapesAreFromWine($usersGrapes, $allGrapesIDS;)
        getMissingGrapesForChosenWine($missingGrapes, $allGrapes, $userGrapesIDS;);
    then
        for(Object grape: $missingGrapes){
            $glDTO.getGrapeDTOs().add(new GrapeDTO((Grape)grape));
        }
end

query checkIfGrapesAreFromWine(List usersGrapes, List allGrapesIDS)
    $num : Number(intValue == usersGrapes.size()) from accumulate(
        Grape($id: id, id memberOf allGrapesIDS) from usersGrapes,
        init(int count = 0;),
        action(count += 1;),
        result(count)
    )
end

query getMissingGrapesForChosenWine(List $missingGrapes,  List allGrapes, List userGrapesIDS)
    $missingGrapes := List() from accumulate(
        Grape($id: id, $grape: this, id not memberOf userGrapesIDS) from allGrapes, collectList($grape)
    )
end