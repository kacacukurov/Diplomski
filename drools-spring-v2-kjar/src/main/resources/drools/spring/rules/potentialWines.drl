import rs.uns.ac.ftn.Diplomski.model.Wine
import rs.uns.ac.ftn.Diplomski.model.Grape
import rs.uns.ac.ftn.Diplomski.model.drl.*
import rs.uns.ac.ftn.Diplomski.web.dto.*

import java.util.List;
import java.util.Collections;

// WINE TO BE POTENTIAL HAS TO HAVE AT LEAST ONE GRAPE
rule "Find potential wine"
    agenda-group "potential-wines"
    salience 10
    when
        $wine: Wine($allGrapes: grapes, $name: wineName);
        $pw: PotentialWinesDTO();
        $gl: GrapeList($usersGrapes: grapeLists);
        $userGrapesIDS: List() from accumulate (
            Grape($id: id) from $usersGrapes, collectList($id)
        )
        chechIfPotentialWine($num, $missingGrapes, $allGrapes, $userGrapesIDS;);
    then
        MissingGrapesDTO missingGrapesDTO = new MissingGrapesDTO();
        WineDTO wineDTO = new WineDTO($wine);
        for(Object grape: $missingGrapes){
            missingGrapesDTO.getGrapeDTOS().add(new GrapeDTO((Grape)grape));
        }
        missingGrapesDTO.setWineDTO(wineDTO);
        $pw.getMissingGrapesDTOS().add(missingGrapesDTO);
end

query chechIfPotentialWine(Number $num, List $missingGrapes, List allGrapes, List userGrapesIds)
    $num := Number(intValue >= 1) from accumulate(
        Grape($id: id, id memberOf userGrapesIds) from allGrapes,
        init(int count = 0;),
        action(count += 1;),
        result(count)
    )
    $missingGrapes := List() from accumulate(
        Grape($id: id, $grape: this, id not memberOf userGrapesIds) from allGrapes, collectList($grape)
    )
end

